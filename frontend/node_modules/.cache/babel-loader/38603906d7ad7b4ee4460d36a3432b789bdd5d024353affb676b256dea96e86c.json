{"ast":null,"code":"import axios from 'axios';\nconst API_URL = 'http://localhost:5000/api';\nconst api = axios.create({\n  baseURL: API_URL,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// Add token to requests if it exists\napi.interceptors.request.use(config => {\n  const token = localStorage.getItem('token');\n  if (token) {\n    config.headers.Authorization = `Bearer ${token}`;\n  }\n  return config;\n});\nexport const annonceService = {\n  getAll: params => api.get('/annonces', {\n    params\n  }),\n  getById: id => api.get(`/annonces/${id}`),\n  create: data => api.post('/annonces', data),\n  update: (id, data) => api.put(`/annonces/${id}`, data),\n  delete: id => api.delete(`/annonces/${id}`)\n};\nexport const authService = {\n  login: credentials => api.post('/auth/login', credentials),\n  getCurrentUser: () => api.get('/auth/me')\n};\nexport const subscriptionService = {\n  subscribe: data => api.post('/subscribe', data)\n};\nexport const emergencyService = {\n  sendAlert: data => api.post('/emergency/alert', data)\n};","map":{"version":3,"names":["axios","API_URL","api","create","baseURL","headers","interceptors","request","use","config","token","localStorage","getItem","Authorization","annonceService","getAll","params","get","getById","id","data","post","update","put","delete","authService","login","credentials","getCurrentUser","subscriptionService","subscribe","emergencyService","sendAlert"],"sources":["C:/Users/LBOSS/Documents/Project de Stage/frontend/src/services/api.js"],"sourcesContent":["import axios from 'axios';\n\nconst API_URL = 'http://localhost:5000/api';\n\nconst api = axios.create({\n  baseURL: API_URL,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// Add token to requests if it exists\napi.interceptors.request.use((config) => {\n  const token = localStorage.getItem('token');\n  if (token) {\n    config.headers.Authorization = `Bearer ${token}`;\n  }\n  return config;\n});\n\nexport const annonceService = {\n  getAll: (params) => api.get('/annonces', { params }),\n  getById: (id) => api.get(`/annonces/${id}`),\n  create: (data) => api.post('/annonces', data),\n  update: (id, data) => api.put(`/annonces/${id}`, data),\n  delete: (id) => api.delete(`/annonces/${id}`),\n};\n\nexport const authService = {\n  login: (credentials) => api.post('/auth/login', credentials),\n  getCurrentUser: () => api.get('/auth/me'),\n};\n\nexport const subscriptionService = {\n  subscribe: (data) => api.post('/subscribe', data),\n};\n\nexport const emergencyService = {\n  sendAlert: (data) => api.post('/emergency/alert', data),\n};\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAEzB,MAAMC,OAAO,GAAG,2BAA2B;AAE3C,MAAMC,GAAG,GAAGF,KAAK,CAACG,MAAM,CAAC;EACvBC,OAAO,EAAEH,OAAO;EAChBI,OAAO,EAAE;IACP,cAAc,EAAE;EAClB;AACF,CAAC,CAAC;;AAEF;AACAH,GAAG,CAACI,YAAY,CAACC,OAAO,CAACC,GAAG,CAAEC,MAAM,IAAK;EACvC,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;EAC3C,IAAIF,KAAK,EAAE;IACTD,MAAM,CAACJ,OAAO,CAACQ,aAAa,GAAG,UAAUH,KAAK,EAAE;EAClD;EACA,OAAOD,MAAM;AACf,CAAC,CAAC;AAEF,OAAO,MAAMK,cAAc,GAAG;EAC5BC,MAAM,EAAGC,MAAM,IAAKd,GAAG,CAACe,GAAG,CAAC,WAAW,EAAE;IAAED;EAAO,CAAC,CAAC;EACpDE,OAAO,EAAGC,EAAE,IAAKjB,GAAG,CAACe,GAAG,CAAC,aAAaE,EAAE,EAAE,CAAC;EAC3ChB,MAAM,EAAGiB,IAAI,IAAKlB,GAAG,CAACmB,IAAI,CAAC,WAAW,EAAED,IAAI,CAAC;EAC7CE,MAAM,EAAEA,CAACH,EAAE,EAAEC,IAAI,KAAKlB,GAAG,CAACqB,GAAG,CAAC,aAAaJ,EAAE,EAAE,EAAEC,IAAI,CAAC;EACtDI,MAAM,EAAGL,EAAE,IAAKjB,GAAG,CAACsB,MAAM,CAAC,aAAaL,EAAE,EAAE;AAC9C,CAAC;AAED,OAAO,MAAMM,WAAW,GAAG;EACzBC,KAAK,EAAGC,WAAW,IAAKzB,GAAG,CAACmB,IAAI,CAAC,aAAa,EAAEM,WAAW,CAAC;EAC5DC,cAAc,EAAEA,CAAA,KAAM1B,GAAG,CAACe,GAAG,CAAC,UAAU;AAC1C,CAAC;AAED,OAAO,MAAMY,mBAAmB,GAAG;EACjCC,SAAS,EAAGV,IAAI,IAAKlB,GAAG,CAACmB,IAAI,CAAC,YAAY,EAAED,IAAI;AAClD,CAAC;AAED,OAAO,MAAMW,gBAAgB,GAAG;EAC9BC,SAAS,EAAGZ,IAAI,IAAKlB,GAAG,CAACmB,IAAI,CAAC,kBAAkB,EAAED,IAAI;AACxD,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}